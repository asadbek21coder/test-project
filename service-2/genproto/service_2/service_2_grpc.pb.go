// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: service_2.proto

package service_2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Service_2Client is the client API for Service_2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Service_2Client interface {
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Post, error)
	Update(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
}

type service_2Client struct {
	cc grpc.ClientConnInterface
}

func NewService_2Client(cc grpc.ClientConnInterface) Service_2Client {
	return &service_2Client{cc}
}

func (c *service_2Client) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/service_2.Service_2/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service_2Client) GetById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/service_2.Service_2/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service_2Client) Update(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/service_2.Service_2/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service_2Client) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/service_2.Service_2/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service_2Server is the server API for Service_2 service.
// All implementations must embed UnimplementedService_2Server
// for forward compatibility
type Service_2Server interface {
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetById(context.Context, *Id) (*Post, error)
	Update(context.Context, *Post) (*Post, error)
	Delete(context.Context, *Id) (*Id, error)
	mustEmbedUnimplementedService_2Server()
}

// UnimplementedService_2Server must be embedded to have forward compatible implementations.
type UnimplementedService_2Server struct {
}

func (UnimplementedService_2Server) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedService_2Server) GetById(context.Context, *Id) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedService_2Server) Update(context.Context, *Post) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedService_2Server) Delete(context.Context, *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedService_2Server) mustEmbedUnimplementedService_2Server() {}

// UnsafeService_2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Service_2Server will
// result in compilation errors.
type UnsafeService_2Server interface {
	mustEmbedUnimplementedService_2Server()
}

func RegisterService_2Server(s grpc.ServiceRegistrar, srv Service_2Server) {
	s.RegisterService(&Service_2_ServiceDesc, srv)
}

func _Service_2_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service_2Server).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_2.Service_2/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service_2Server).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_2_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service_2Server).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_2.Service_2/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service_2Server).GetById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_2_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service_2Server).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_2.Service_2/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service_2Server).Update(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_2_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service_2Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_2.Service_2/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service_2Server).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_2_ServiceDesc is the grpc.ServiceDesc for Service_2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_2.Service_2",
	HandlerType: (*Service_2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _Service_2_GetAll_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _Service_2_GetById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Service_2_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Service_2_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_2.proto",
}
